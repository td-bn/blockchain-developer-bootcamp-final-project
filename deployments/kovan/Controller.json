{
  "address": "0xb0F3Cea41A5F577603874fF742cEd22F5d578351",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "earn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "setStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x11c2e61184b5091eb253e9811f00951ac3321e73d1ed1f7734f62051e7cf380c",
  "receipt": {
    "to": null,
    "from": "0xa8CF219AD8E7f1fE2087DFF5dC9196A56695B170",
    "contractAddress": "0xb0F3Cea41A5F577603874fF742cEd22F5d578351",
    "transactionIndex": 7,
    "gasUsed": "748727",
    "logsBloom": "0x
    "blockHash": "0xca2016a4b2edee9adef655c3e176ddebdaf39f2d54597f55ff528db82aea5297",
    "transactionHash": "0x11c2e61184b5091eb253e9811f00951ac3321e73d1ed1f7734f62051e7cf380c",
    "logs": [],
    "blockNumber": 28536295,
    "cumulativeGasUsed": "2132000",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "2b81705ccd7aed8eb0b8fbb83d8bd2bf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"earn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"setStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/Controller.sol\":\"Controller\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IStrategy {\\n    function deposit() external; \\n    function withdraw(uint256 _amount) external;\\n    function withdrawAll() external;\\n}\",\"keccak256\":\"0x9d942e30da03e083d23ec87775e23f48224d4e07211242e232b678f3f5ee2fa4\",\"license\":\"MIT\"},\"contracts/protocol/Controller.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/IStrategy.sol\\\";\\n\\ncontract Controller {\\n    using SafeMath for uint256;\\n\\n    address public vault;\\n    address public governance;\\n    address public strategy;\\n\\n    constructor() {\\n        governance = msg.sender;\\n    }\\n\\n    function setVault(address _vault) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        vault = _vault;\\n    }\\n\\n    function setStrategy(address _strategy) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        strategy = _strategy;\\n    }\\n\\n    function earn(uint256 _amount) external {\\n        require(strategy != address(0), \\\"no strategy\\\");\\n        _safeTransferETH(strategy, _amount);\\n        IStrategy(strategy).deposit();\\n    }\\n\\n    function withdrawAll() external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        // Strategy.withdrawAll\\n        IStrategy(strategy).withdrawAll();\\n    }\\n\\n    function withdraw(uint256 _amount) external {\\n        require(msg.sender == vault, \\\"!vault\\\");\\n        // Strategy.withdraw\\n        IStrategy(strategy).withdraw(_amount);\\n    }\\n\\n    function _safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'ETH_TRANSFER_FAILED');\\n    }\\n\\n    receive() external payable {}\\n}\",\"keccak256\":\"0x31fdd873f95c1f215137635447d2e0547590aaf1a319f5fc722e79c98d96cb50\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610c3b806100616000396000f3fe60806040526004361061007f5760003560e01c8063853828b61161004e578063853828b614610131578063a8c62e7614610148578063e65a011714610173578063fbfa77cf1461019c57610086565b80632e1a7d4d1461008b57806333a100ca146100b45780635aa6e675146100dd5780636817031b1461010857610086565b3661008657005b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad91906108cc565b6101c7565b005b3480156100c057600080fd5b506100db60048036038101906100d691906108a3565b6102e5565b005b3480156100e957600080fd5b506100f26103b9565b6040516100ff91906109e7565b60405180910390f35b34801561011457600080fd5b5061012f600480360381019061012a91906108a3565b6103df565b005b34801561013d57600080fd5b506101466104b2565b005b34801561015457600080fd5b5061015d6105c6565b60405161016a91906109e7565b60405180910390f35b34801561017f57600080fd5b5061019a600480360381019061019591906108cc565b6105ec565b005b3480156101a857600080fd5b506101b161072f565b6040516101be91906109e7565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610255576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024c90610a42565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b81526004016102b09190610a82565b600060405180830381600087803b1580156102ca57600080fd5b505af11580156102de573d6000803e3d6000fd5b5050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610375576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036c90610a02565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461046f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046690610a02565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610542576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053990610a02565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663853828b66040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156105ac57600080fd5b505af11580156105c0573d6000803e3d6000fd5b50505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561067e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067590610a22565b60405180910390fd5b6106aa600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682610753565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db06040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561071457600080fd5b505af1158015610728573d6000803e3d6000fd5b5050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff8111156107ae577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156107e05781602001600182028036833780820191505090505b506040516107ee91906109d0565b60006040518083038185875af1925050503d806000811461082b576040519150601f19603f3d011682016040523d82523d6000602084013e610830565b606091505b5050905080610874576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086b90610a62565b60405180910390fd5b505050565b60008135905061088881610bd7565b92915050565b60008135905061089d81610bee565b92915050565b6000602082840312156108b557600080fd5b60006108c384828501610879565b91505092915050565b6000602082840312156108de57600080fd5b60006108ec8482850161088e565b91505092915050565b6108fe81610ac4565b82525050565b600061090f82610a9d565b6109198185610aa8565b9350610929818560208601610b00565b80840191505092915050565b6000610942600b83610ab3565b915061094d82610b33565b602082019050919050565b6000610965600b83610ab3565b915061097082610b5c565b602082019050919050565b6000610988600683610ab3565b915061099382610b85565b602082019050919050565b60006109ab601383610ab3565b91506109b682610bae565b602082019050919050565b6109ca81610af6565b82525050565b60006109dc8284610904565b915081905092915050565b60006020820190506109fc60008301846108f5565b92915050565b60006020820190508181036000830152610a1b81610935565b9050919050565b60006020820190508181036000830152610a3b81610958565b9050919050565b60006020820190508181036000830152610a5b8161097b565b9050919050565b60006020820190508181036000830152610a7b8161099e565b9050919050565b6000602082019050610a9760008301846109c1565b92915050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000610acf82610ad6565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610b1e578082015181840152602081019050610b03565b83811115610b2d576000848401525b50505050565b7f21676f7665726e616e6365000000000000000000000000000000000000000000600082015250565b7f6e6f207374726174656779000000000000000000000000000000000000000000600082015250565b7f217661756c740000000000000000000000000000000000000000000000000000600082015250565b7f4554485f5452414e534645525f4641494c454400000000000000000000000000600082015250565b610be081610ac4565b8114610beb57600080fd5b50565b610bf781610af6565b8114610c0257600080fd5b5056fea264697066735822122078866a7990b99e95f751ad04bc0f9d2e41125c56d27d9552c18a3834160eba9f64736f6c63430008040033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c8063853828b61161004e578063853828b614610131578063a8c62e7614610148578063e65a011714610173578063fbfa77cf1461019c57610086565b80632e1a7d4d1461008b57806333a100ca146100b45780635aa6e675146100dd5780636817031b1461010857610086565b3661008657005b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad91906108cc565b6101c7565b005b3480156100c057600080fd5b506100db60048036038101906100d691906108a3565b6102e5565b005b3480156100e957600080fd5b506100f26103b9565b6040516100ff91906109e7565b60405180910390f35b34801561011457600080fd5b5061012f600480360381019061012a91906108a3565b6103df565b005b34801561013d57600080fd5b506101466104b2565b005b34801561015457600080fd5b5061015d6105c6565b60405161016a91906109e7565b60405180910390f35b34801561017f57600080fd5b5061019a600480360381019061019591906108cc565b6105ec565b005b3480156101a857600080fd5b506101b161072f565b6040516101be91906109e7565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610255576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024c90610a42565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b81526004016102b09190610a82565b600060405180830381600087803b1580156102ca57600080fd5b505af11580156102de573d6000803e3d6000fd5b5050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610375576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036c90610a02565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461046f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046690610a02565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610542576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053990610a02565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663853828b66040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156105ac57600080fd5b505af11580156105c0573d6000803e3d6000fd5b50505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561067e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067590610a22565b60405180910390fd5b6106aa600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682610753565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db06040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561071457600080fd5b505af1158015610728573d6000803e3d6000fd5b5050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff8111156107ae577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156107e05781602001600182028036833780820191505090505b506040516107ee91906109d0565b60006040518083038185875af1925050503d806000811461082b576040519150601f19603f3d011682016040523d82523d6000602084013e610830565b606091505b5050905080610874576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086b90610a62565b60405180910390fd5b505050565b60008135905061088881610bd7565b92915050565b60008135905061089d81610bee565b92915050565b6000602082840312156108b557600080fd5b60006108c384828501610879565b91505092915050565b6000602082840312156108de57600080fd5b60006108ec8482850161088e565b91505092915050565b6108fe81610ac4565b82525050565b600061090f82610a9d565b6109198185610aa8565b9350610929818560208601610b00565b80840191505092915050565b6000610942600b83610ab3565b915061094d82610b33565b602082019050919050565b6000610965600b83610ab3565b915061097082610b5c565b602082019050919050565b6000610988600683610ab3565b915061099382610b85565b602082019050919050565b60006109ab601383610ab3565b91506109b682610bae565b602082019050919050565b6109ca81610af6565b82525050565b60006109dc8284610904565b915081905092915050565b60006020820190506109fc60008301846108f5565b92915050565b60006020820190508181036000830152610a1b81610935565b9050919050565b60006020820190508181036000830152610a3b81610958565b9050919050565b60006020820190508181036000830152610a5b8161097b565b9050919050565b60006020820190508181036000830152610a7b8161099e565b9050919050565b6000602082019050610a9760008301846109c1565b92915050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000610acf82610ad6565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610b1e578082015181840152602081019050610b03565b83811115610b2d576000848401525b50505050565b7f21676f7665726e616e6365000000000000000000000000000000000000000000600082015250565b7f6e6f207374726174656779000000000000000000000000000000000000000000600082015250565b7f217661756c740000000000000000000000000000000000000000000000000000600082015250565b7f4554485f5452414e534645525f4641494c454400000000000000000000000000600082015250565b610be081610ac4565b8114610beb57600080fd5b50565b610bf781610af6565b8114610c0257600080fd5b5056fea264697066735822122078866a7990b99e95f751ad04bc0f9d2e41125c56d27d9552c18a3834160eba9f64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1978,
        "contract": "contracts/protocol/Controller.sol:Controller",
        "label": "vault",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1980,
        "contract": "contracts/protocol/Controller.sol:Controller",
        "label": "governance",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1982,
        "contract": "contracts/protocol/Controller.sol:Controller",
        "label": "strategy",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}