{
  "address": "0x31a3DcbbBF10AE1235475d3b312ae9AB30f285e0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_aaveConnector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_aWETHToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wethGatewayAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "aWETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aaveInterfaceAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wethGatewayAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9b767178ded0bdd2d95e8b8e6f0744b11c6f69b75e18d581c3afdba81aa4f685",
  "receipt": {
    "to": null,
    "from": "0xa8CF219AD8E7f1fE2087DFF5dC9196A56695B170",
    "contractAddress": "0x31a3DcbbBF10AE1235475d3b312ae9AB30f285e0",
    "transactionIndex": 3,
    "gasUsed": "991597",
    "logsBloom": "0x
    "blockHash": "0x37f0ef4f48b1bf45e25233be14f1c63a125d724fc78c230d8d858e424d15f7e9",
    "transactionHash": "0x9b767178ded0bdd2d95e8b8e6f0744b11c6f69b75e18d581c3afdba81aa4f685",
    "logs": [],
    "blockNumber": 28537521,
    "cumulativeGasUsed": "1467952",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb0F3Cea41A5F577603874fF742cEd22F5d578351",
    "0x74699311812969c98D0CDeaed1Cd8F3E22Deff0e",
    "0x87b1f4cf9BD63f7BBD3eE1aD04E8F52540349347",
    "0xA61ca04DF33B72b235a8A28CfB535bb7A5271B70"
  ],
  "solcInputHash": "2b81705ccd7aed8eb0b8fbb83d8bd2bf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aaveConnector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aWETHToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethGatewayAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"aWETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveInterfaceAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethGatewayAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/strategy/ETHStrategy.sol\":\"ETHStrategy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/interfaces/IAaveConnector.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IAaveConnector {\\n    function depositETH(address _onBehalfOf) external payable returns (bool);\\n    function getaWETHBalance(address _user) external view returns (uint256);\\n    function getAaveLendingPool() external view returns (address);\\n}\\n\",\"keccak256\":\"0xf7a2e7327391468c510889f5a60921673e9ace418b65397b575955591ef62a08\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IVault {\\n    function deposit(uint256 _amount) external payable;\\n    function withdraw(uint256 _shares) external;\\n    function getPricePerFullShare() external view returns (uint256);\\n}\",\"keccak256\":\"0x564689053af17092c3060320d2203c884bb71fd53deba4b0df93854c5b8411c6\",\"license\":\"MIT\"},\"contracts/interfaces/IWETHGateway.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IWETHGateway {\\n  function depositETH(\\n    address lendingPool,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external payable;\\n\\n  function withdrawETH(\\n    address lendingPool,\\n    uint256 amount,\\n    address to\\n  ) external;\\n}\",\"keccak256\":\"0x9333ef66d8fd4e40148b0ac3e637f59c80d21665ea342a6c7a7a5bce66de7db2\",\"license\":\"MIT\"},\"contracts/protocol/strategy/ETHStrategy.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../../interfaces/IWETHGateway.sol\\\";\\nimport \\\"../../interfaces/IAaveConnector.sol\\\";\\nimport \\\"../../interfaces/IVault.sol\\\";\\n\\ncontract ETHStrategy {\\n    using SafeMath for uint256;\\n\\n    address public governance;\\n    address public controller;\\n    address public vault;\\n    address public aWETH;\\n    address public wethGatewayAddress;\\n\\n    address public aaveInterfaceAddress;\\n\\n    constructor(address _controller, address _aaveConnector, address _aWETHToken, address _wethGatewayAddress) {\\n        governance = msg.sender;\\n        controller = _controller;\\n        aaveInterfaceAddress = _aaveConnector;\\n        aWETH = _aWETHToken;\\n        wethGatewayAddress = _wethGatewayAddress;\\n    }\\n\\n    function deposit() external {\\n        uint256 _balance =  address(this).balance;\\n        if (_balance > 0 ) {\\n            IAaveConnector(aaveInterfaceAddress).depositETH{value: _balance}(address(this));\\n        }\\n    }\\n\\n    function withdraw(uint256 _amount) external {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        _withdrawFromAavePool(_amount);\\n        _safeTransferETH(vault, _amount);\\n    }\\n\\n    function withdrawAll() external {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        uint256 _balance = IERC20(aWETH).balanceOf(address(this));\\n\\n        // Approve burning of aWETH\\n        IERC20(aWETH).approve(wethGatewayAddress, _balance);\\n\\n        address lendingPool = IAaveConnector(aaveInterfaceAddress).getAaveLendingPool();\\n\\n        IWETHGateway(wethGatewayAddress).withdrawETH(lendingPool, _balance, address(this));\\n\\n        _safeTransferETH(vault, _balance);\\n    }\\n\\n    function _withdrawFromAavePool(uint256 _amount) internal {\\n        address lendingPool = IAaveConnector(aaveInterfaceAddress).getAaveLendingPool();\\n\\n        // Approve burning of aWETH\\n        IERC20(aWETH).approve(wethGatewayAddress, _amount);\\n        // Withdraw\\n        IWETHGateway(wethGatewayAddress).withdrawETH(lendingPool, _amount, address(this));\\n    }\\n\\n    function _safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'ETH_TRANSFER_FAILED');\\n    }\\n\\n    receive() external payable {}\\n}\",\"keccak256\":\"0xa003323f3583c7ff2e29171f1f9ed8770f7886a1a7f5b9c4807895515fc035d3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620011353803806200113583398181016040528101906200003791906200019c565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505062000256565b60008151905062000196816200023c565b92915050565b60008060008060808587031215620001b357600080fd5b6000620001c38782880162000185565b9450506020620001d68782880162000185565b9350506040620001e98782880162000185565b9250506060620001fc8782880162000185565b91505092959194509250565b600062000215826200021c565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620002478162000208565b81146200025357600080fd5b50565b610ecf80620002666000396000f3fe60806040526004361061008a5760003560e01c8063853828b611610059578063853828b614610140578063d0e30db014610157578063d633590a1461016e578063f77c479114610199578063fbfa77cf146101c457610091565b806322db78d8146100965780632e1a7d4d146100c15780635aa6e675146100ea5780636d2a583a1461011557610091565b3661009157005b600080fd5b3480156100a257600080fd5b506100ab6101ef565b6040516100b89190610ca5565b60405180910390f35b3480156100cd57600080fd5b506100e860048036038101906100e39190610ba7565b610215565b005b3480156100f657600080fd5b506100ff6102dd565b60405161010c9190610ca5565b60405180910390f35b34801561012157600080fd5b5061012a610301565b6040516101379190610ca5565b60405180910390f35b34801561014c57600080fd5b50610155610327565b005b34801561016357600080fd5b5061016c61069d565b005b34801561017a57600080fd5b5061018361075e565b6040516101909190610ca5565b60405180910390f35b3480156101a557600080fd5b506101ae610784565b6040516101bb9190610ca5565b60405180910390f35b3480156101d057600080fd5b506101d96107aa565b6040516101e69190610ca5565b60405180910390f35b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029c90610d20565b60405180910390fd5b6102ae816107d0565b6102da600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826109db565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ae90610d20565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104149190610ca5565b60206040518083038186803b15801561042c57600080fd5b505afa158015610440573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104649190610bd0565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016104e5929190610cc0565b602060405180830381600087803b1580156104ff57600080fd5b505af1158015610513573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105379190610b7e565b506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634dd366bc6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105a257600080fd5b505afa1580156105b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105da9190610b55565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166380500d208284306040518463ffffffff1660e01b815260040161063b93929190610ce9565b600060405180830381600087803b15801561065557600080fd5b505af1158015610669573d6000803e3d6000fd5b50505050610699600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836109db565b5050565b6000479050600081111561075b57600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632d2da80682306040518363ffffffff1660e01b81526004016107079190610ca5565b6020604051808303818588803b15801561072057600080fd5b505af1158015610734573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906107599190610b7e565b505b50565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634dd366bc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561083a57600080fd5b505afa15801561084e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108729190610b55565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b81526004016108f3929190610cc0565b602060405180830381600087803b15801561090d57600080fd5b505af1158015610921573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109459190610b7e565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166380500d208284306040518463ffffffff1660e01b81526004016109a593929190610ce9565b600060405180830381600087803b1580156109bf57600080fd5b505af11580156109d3573d6000803e3d6000fd5b505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff811115610a36577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610a685781602001600182028036833780820191505090505b50604051610a769190610c8e565b60006040518083038185875af1925050503d8060008114610ab3576040519150601f19603f3d011682016040523d82523d6000602084013e610ab8565b606091505b5050905080610afc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af390610d40565b60405180910390fd5b505050565b600081519050610b1081610e54565b92915050565b600081519050610b2581610e6b565b92915050565b600081359050610b3a81610e82565b92915050565b600081519050610b4f81610e82565b92915050565b600060208284031215610b6757600080fd5b6000610b7584828501610b01565b91505092915050565b600060208284031215610b9057600080fd5b6000610b9e84828501610b16565b91505092915050565b600060208284031215610bb957600080fd5b6000610bc784828501610b2b565b91505092915050565b600060208284031215610be257600080fd5b6000610bf084828501610b40565b91505092915050565b610c0281610d87565b82525050565b6000610c1382610d60565b610c1d8185610d6b565b9350610c2d818560208601610dcf565b80840191505092915050565b6000610c46600b83610d76565b9150610c5182610e02565b602082019050919050565b6000610c69601383610d76565b9150610c7482610e2b565b602082019050919050565b610c8881610dc5565b82525050565b6000610c9a8284610c08565b915081905092915050565b6000602082019050610cba6000830184610bf9565b92915050565b6000604082019050610cd56000830185610bf9565b610ce26020830184610c7f565b9392505050565b6000606082019050610cfe6000830186610bf9565b610d0b6020830185610c7f565b610d186040830184610bf9565b949350505050565b60006020820190508181036000830152610d3981610c39565b9050919050565b60006020820190508181036000830152610d5981610c5c565b9050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000610d9282610da5565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610ded578082015181840152602081019050610dd2565b83811115610dfc576000848401525b50505050565b7f21636f6e74726f6c6c6572000000000000000000000000000000000000000000600082015250565b7f4554485f5452414e534645525f4641494c454400000000000000000000000000600082015250565b610e5d81610d87565b8114610e6857600080fd5b50565b610e7481610d99565b8114610e7f57600080fd5b50565b610e8b81610dc5565b8114610e9657600080fd5b5056fea26469706673582212207714fb82fd413996c1bb3943257f889efa43e10b592b03e39758aa3ea967f65d64736f6c63430008040033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c8063853828b611610059578063853828b614610140578063d0e30db014610157578063d633590a1461016e578063f77c479114610199578063fbfa77cf146101c457610091565b806322db78d8146100965780632e1a7d4d146100c15780635aa6e675146100ea5780636d2a583a1461011557610091565b3661009157005b600080fd5b3480156100a257600080fd5b506100ab6101ef565b6040516100b89190610ca5565b60405180910390f35b3480156100cd57600080fd5b506100e860048036038101906100e39190610ba7565b610215565b005b3480156100f657600080fd5b506100ff6102dd565b60405161010c9190610ca5565b60405180910390f35b34801561012157600080fd5b5061012a610301565b6040516101379190610ca5565b60405180910390f35b34801561014c57600080fd5b50610155610327565b005b34801561016357600080fd5b5061016c61069d565b005b34801561017a57600080fd5b5061018361075e565b6040516101909190610ca5565b60405180910390f35b3480156101a557600080fd5b506101ae610784565b6040516101bb9190610ca5565b60405180910390f35b3480156101d057600080fd5b506101d96107aa565b6040516101e69190610ca5565b60405180910390f35b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029c90610d20565b60405180910390fd5b6102ae816107d0565b6102da600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826109db565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ae90610d20565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104149190610ca5565b60206040518083038186803b15801561042c57600080fd5b505afa158015610440573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104649190610bd0565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016104e5929190610cc0565b602060405180830381600087803b1580156104ff57600080fd5b505af1158015610513573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105379190610b7e565b506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634dd366bc6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105a257600080fd5b505afa1580156105b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105da9190610b55565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166380500d208284306040518463ffffffff1660e01b815260040161063b93929190610ce9565b600060405180830381600087803b15801561065557600080fd5b505af1158015610669573d6000803e3d6000fd5b50505050610699600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836109db565b5050565b6000479050600081111561075b57600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632d2da80682306040518363ffffffff1660e01b81526004016107079190610ca5565b6020604051808303818588803b15801561072057600080fd5b505af1158015610734573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906107599190610b7e565b505b50565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634dd366bc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561083a57600080fd5b505afa15801561084e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108729190610b55565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b81526004016108f3929190610cc0565b602060405180830381600087803b15801561090d57600080fd5b505af1158015610921573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109459190610b7e565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166380500d208284306040518463ffffffff1660e01b81526004016109a593929190610ce9565b600060405180830381600087803b1580156109bf57600080fd5b505af11580156109d3573d6000803e3d6000fd5b505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff811115610a36577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610a685781602001600182028036833780820191505090505b50604051610a769190610c8e565b60006040518083038185875af1925050503d8060008114610ab3576040519150601f19603f3d011682016040523d82523d6000602084013e610ab8565b606091505b5050905080610afc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af390610d40565b60405180910390fd5b505050565b600081519050610b1081610e54565b92915050565b600081519050610b2581610e6b565b92915050565b600081359050610b3a81610e82565b92915050565b600081519050610b4f81610e82565b92915050565b600060208284031215610b6757600080fd5b6000610b7584828501610b01565b91505092915050565b600060208284031215610b9057600080fd5b6000610b9e84828501610b16565b91505092915050565b600060208284031215610bb957600080fd5b6000610bc784828501610b2b565b91505092915050565b600060208284031215610be257600080fd5b6000610bf084828501610b40565b91505092915050565b610c0281610d87565b82525050565b6000610c1382610d60565b610c1d8185610d6b565b9350610c2d818560208601610dcf565b80840191505092915050565b6000610c46600b83610d76565b9150610c5182610e02565b602082019050919050565b6000610c69601383610d76565b9150610c7482610e2b565b602082019050919050565b610c8881610dc5565b82525050565b6000610c9a8284610c08565b915081905092915050565b6000602082019050610cba6000830184610bf9565b92915050565b6000604082019050610cd56000830185610bf9565b610ce26020830184610c7f565b9392505050565b6000606082019050610cfe6000830186610bf9565b610d0b6020830185610c7f565b610d186040830184610bf9565b949350505050565b60006020820190508181036000830152610d3981610c39565b9050919050565b60006020820190508181036000830152610d5981610c5c565b9050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000610d9282610da5565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610ded578082015181840152602081019050610dd2565b83811115610dfc576000848401525b50505050565b7f21636f6e74726f6c6c6572000000000000000000000000000000000000000000600082015250565b7f4554485f5452414e534645525f4641494c454400000000000000000000000000600082015250565b610e5d81610d87565b8114610e6857600080fd5b50565b610e7481610d99565b8114610e7f57600080fd5b50565b610e8b81610dc5565b8114610e9657600080fd5b5056fea26469706673582212207714fb82fd413996c1bb3943257f889efa43e10b592b03e39758aa3ea967f65d64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2326,
        "contract": "contracts/protocol/strategy/ETHStrategy.sol:ETHStrategy",
        "label": "governance",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2328,
        "contract": "contracts/protocol/strategy/ETHStrategy.sol:ETHStrategy",
        "label": "controller",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2330,
        "contract": "contracts/protocol/strategy/ETHStrategy.sol:ETHStrategy",
        "label": "vault",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2332,
        "contract": "contracts/protocol/strategy/ETHStrategy.sol:ETHStrategy",
        "label": "aWETH",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2334,
        "contract": "contracts/protocol/strategy/ETHStrategy.sol:ETHStrategy",
        "label": "wethGatewayAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2336,
        "contract": "contracts/protocol/strategy/ETHStrategy.sol:ETHStrategy",
        "label": "aaveInterfaceAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}